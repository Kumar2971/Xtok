import java.net.URL
apply plugin: "com.android.application"

// Add the following line:
apply plugin: 'com.google.gms.google-services'  // Google Services plugin
apply plugin: 'com.google.firebase.crashlytics'


import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]*/

project.ext.react = [entryFile   : "packages/mobile/index.js",
                     root        : "../../../../",
                     enableHermes: false,  // clean and rebuild if changing,
                     cliPath     : ["node", "-e", "console.log(require('react-native/cli').bin);"].execute([], projectDir).text.trim()]

apply from: "../../../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.*/
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.*/
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.*/
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.*/
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        configurations.all {
            resolutionStrategy { force 'androidx.core:core:1.6.0' }
        }
        applicationId "com.app.goshorts"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 11
        versionName "1.0.33"
        multiDexEnabled true
        missingDimensionStrategy 'react-native-camera', 'general'
        missingDimensionStrategy "store", "play"
        vectorDrawables.useSupportLibrary = true

    }
    splits {
        abi {
            enable true
            reset()
            // enable enableSeparateBuildPerCPUArchitecture
            include 'universal'
            exclude "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('release.keystore')
            storePassword 'BuilderBx2019!'
            keyAlias 'release'
            keyPassword 'BuilderBx2019!'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            // see https://reactnative.dev/docs/signed-apk-android.
            // Enables code shrinking, obfuscation, and optimization
            minifyEnabled enableProguardInReleaseBuilds
            // Removes unused resources, making the APK smaller
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
          strippedNativeLibsDir 'build/intermediates/stripped_native_libs/release/out/lib'
          unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
        }
        innerTest {
            matchingFallbacks = ['debug', 'release']
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libjsc.so'
        pickFirst 'lib/arm64-v8a/libjsc.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        jniLibs {
            useLegacyPackaging true
        }
    }
}

repositories {
    flatDir {
            dirs "$rootDir/libs"
        }
    mavenCentral()
}

dependencies {
    implementation 'org.webkit:android-jsc:+'
    def camerax_version = "1.1.0"
    implementation('com.amazonaws:ivs-broadcast:1.12.0:stages@aar') {
        exclude group: 'org.webrtc'
    }

    implementation("androidx.appcompat:appcompat:1.3.1") {
        version {
            strictly '1.3.1'
        }
    }
    implementation project(':lottie-react-native')
     implementation project(':react-native-splash-screen')
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-core:${camerax_version}"
    // implementation files('libs/deepar.aar')
    
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.facebook.android:facebook-android-sdk:4.40.0'
    implementation "com.facebook.react:react-native:+"  
    implementation "androidx.appcompat:appcompat-resources:1.4.0"
    implementation platform('com.google.firebase:firebase-bom:32.1.0')
    implementation 'com.google.firebase:firebase-dynamic-links'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-core:17.0.0'
    implementation "com.google.firebase:firebase-iid:21.1.0"
    implementation("androidx.appcompat:appcompat:1.3.1") {
        version {
            strictly '1.3.1'
        }
    }
    implementation "androidx.multidex:multidex:2.0.1"
    if (enableHermes) {
        def hermesPath = "../../../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    //Manual Link Modules
    implementation project(':react-native-webview')
    // implementation project(':react-native-push-notification')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-iap')
    implementation project(':react-native-camera')
    implementation(project(':react-native-geolocation-service')) {
        exclude group: 'com.google.android.gms', module: 'play-services-location'
    }

    // Add the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:18.0.2'

    // Add the SDKs for any other Firebase products you want to use in your app
    // For example, to use Firebase Authentication and Cloud Firestore
    implementation 'com.google.firebase:firebase-auth:19.2.0'
    implementation 'com.google.firebase:firebase-firestore:21.4.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

    implementation project(':react-native-gesture-handler')

    implementation project(':react-native-svg')

    implementation project(':react-native-share')

    implementation project(':react-native-video')

    implementation project(':react-native-reanimated')

    implementation project(':react-native-document-picker')

    implementation project(':react-native-fs')

    implementation project(':react-native-localize')

    implementation "androidx.core:core-ktx:1.6.0"

    // implementation project(':@pdftron_react-native-pdf')
//     implementation project(':react-native-ffmpeg')
//     implementation project(':react-native-version-check')

    implementation 'com.facebook.fresco:animated-gif:2.0.0'

    implementation project(':rnfgservice')
    // implementation project(':ffmpegfilekit')
    // implementation project(':rnwebrtc')
    implementation project(':rnincallmanager')

    implementation project(':react-native-restart')

//     compile project(':react-native-action-sheet')

    // implementation project(':stripe_stripe-react-native')
    //Gson Parser
    implementation 'com.google.code.gson:gson:2.10.1'
    //Constraint view
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    //Recyclerview
    implementation "androidx.recyclerview:recyclerview:1.3.2"
    //Circle image view
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    //Network image rendering
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation 'com.android.billingclient:billing:6.0.1'

    implementation(name: 'deepar', ext: 'aar')
    implementation(name: 'ffmpeg-kit-full-gpl', ext: 'aar')
    implementation 'com.arthenica:smart-exception-java:0.2.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.android.gms.strict-version-matcher-plugin'
